type RemoteCallEndpoint = record {
    canister_id : principal;
    method_name : text;
};

type RemoteCallPayload = record {
    endpoint : RemoteCallEndpoint;
    args_raw : blob;
    cycles : nat64;
};

type Program = variant {
    Empty;
    RemoteCallSequence : vec RemoteCallPayload;
};

type RoleId = nat16;
type PermissionId = nat16;
type HistoryEntryId = nat64;
type TaskId = nat64;

type ExecuteRequest = record {
    title : text;
    description : text;
    program : Program;
    role_id : RoleId;
    permission_id : PermissionId;
    authorization_delay_nano : nat64;
};

type ExecuteResponse = variant {
    Executed : HistoryEntryId;
    ScheduledForAuthorization : TaskId;
};

type AuthorizeExecutionRequest = record {
    task_id : TaskId;
};

type AuthorizeExecutionResponse = ExecuteResponse;

type ScheduledTask = record {
    id : TaskId;
    payload : Task;
    scheduled_at : nat64;
    rescheduled_at : opt nat64;
    scheduling_options : SchedulingOptions;
    delay_passed : bool;
};

type Task = record {
    data : blob;
};

type SchedulingOptions = record {
    delay_nano : nat64;
    interval_nano : nat64;
    iterations : Iterations;
};

type Iterations = variant {
    Infinite;
    Exact : nat64;
};

type GetHistoryEntryIdsResponse = record {
    ids : vec HistoryEntryId;
};

type GetHistoryEntriesRequest = record {
    ids : vec HistoryEntryId;
};

type GetHistoryEntriesResponse = record {
    entries : vec HistoryEntry;
};

type HistoryEntry = record {
    id : HistoryEntryId;
    entry_type : HistoryEntryType;
    title : text;
    description : text;
    program : Program;
    timestamp : nat64;
    role_id : RoleId;
    permission_id : PermissionId;
    authorized_by : vec principal;
};

type HistoryEntryType = variant {
    Pending;
    Authorized : record { 0 : nat64; 1 : vec CallResult };
    Declined : record { 0 : nat64; 1 : text };
};

type CallResult = variant {
    Ok : blob;
    Err : record { 0 : RejectionCode; 1 : text };
};

type RejectionCode = variant {
    NoError;

    SysFatal;
    SysTransient;
    DestinationInvalid;
    CanisterReject;
    CanisterError;

    Unknown;
};

type CreateProfileRequest = record {
    principal_id : principal;
    name : text;
    description : text;
};

type UpdateProfileRequest = record {
    principal_id : principal;
    new_name : opt text;
    new_description : opt text;
};

type UpdateMyProfileRequest = record {
    new_name : opt text;
    new_description : opt text;
};

type RemoveProfileRequest = record {
    principal_id : principal;
};

type GetProfileIdsResponse = record {
    principal_ids : vec principal;
};

type GetMyProfileResponse = record {
    profile : Profile;
};

type Profile = record {
    principal_id : principal;
    name : text;
    description : text;
};

type GetProfilesRequest = record {
    principal_ids : vec principal;
};

type GetProfilesResponse = record {
    profiles : vec Profile;
};

type GetMyRolesResponse = record {
    roles : vec Role;
};

type Role = record {
    id : RoleId;
    name : text;
    role_type : RoleType;
};

type RoleType = variant {
    PrivateQuantity : record { 0 : nat16; 1 : vec principal };
    PrivateFraction : record { 0 : float32; 1 : vec principal };
    Public;
    HasProfile : vec principal;
};

type GetMyPermissionsResponse = record {
    permissions : vec Permission;
};

type Permission = record {
    id : PermissionId;
    name : text;
    targets : vec PermissionTarget;
    scope : PermissionScope;
};

type PermissionTarget = variant {
    SelfEmptyProgram;
    Canister : principal;
    Endpoint : RemoteCallEndpoint;
};

type PermissionScope = variant {
    Whitelist;
    Blacklist;
};

service : {
    "execute" : (ExecuteRequest) -> (ExecuteResponse);
    "authorize_execution" : (AuthorizeExecutionRequest) -> (AuthorizeExecutionResponse);
    "get_scheduled_for_authorization_executions" : () -> (vec ScheduledTask) query;
    "get_history_entry_ids" : () -> (GetHistoryEntryIdsResponse) query;
    "get_history_entries" : (GetHistoryEntriesRequest) -> (GetHistoryEntriesResponse) query;

    "create_profile" : (CreateProfileRequest) -> ();
    "update_profile" : (UpdateProfileRequest) -> ();
    "update_my_profile" : (UpdateMyProfileRequest) -> ();
    "remove_profile" : (RemoveProfileRequest) -> ();
    "get_profile_ids" : () -> (GetProfileIdsResponse) query;
    "get_my_profile" : () -> (GetMyProfileResponse) query;
    "get_profiles" : (GetProfilesRequest) -> (GetProfilesResponse) query;

    "get_my_roles" : () -> (GetMyRolesResponse) query;
    "get_my_permissions" : () -> (GetMyPermissionsResponse) query;
}
