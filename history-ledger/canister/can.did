// ------------------ SHARES MOVE --------------------

type GroupId = nat32;
type Shares = nat;

type GetSharesInfoOfAtRequest = record {
    group_id : GroupId;
    of : principal;
    at : nat64;
};

type SharesInfo = record {
    balance : Shares;
    total_supply : Shares;
};

type GetSharesInfoOfAtResponse = record {
    info_opt : opt SharesInfo;
};

// ------------------ VOTING EXECUTION -------------------

type VotingConfigId = nat32;
type VotingId = nat64;
type ChoiceId = nat32;

type RemoteCallEndpoint = record {
    canister_id : principal;
    method_name : text;
};

type TimeInterval = record {
    from : nat64;
    to : nat64;
};

type VotingExecutionRecordFilter = record {
    voting_config_id : opt VotingConfigId;
    canister_id : opt principal;
    endpoint : opt RemoteCallEndpoint;
    time_interval : opt TimeInterval;
};

type VotingExecutionRecordPageRequest = record {
    page_index : nat32;
    page_size : nat32;
    filter : VotingExecutionRecordFilter;
    sort : empty;
};

type GetVotingExecutionRecordsRequest = record {
    page_req : VotingExecutionRecordPageRequest;
};

type VotingExecutionRecordExternal = record {
    voting_id : VotingId;
    voting_config_id : VotingConfigId;
    name : text;
    description : text;
    timestamp : nat64;
    winners_count : nat32;
};

type VotingExecutionRecordPage = record {
    data : vec VotingExecutionRecordExternal;
    has_next : bool;
};

type GetVotingExecutionRecordsResponse = record {
    page : VotingExecutionRecordPage;
};

type PageRequest = record {
    page_index : nat32;
    page_size : nat32;
    filter : empty;
    sort : empty;
};

type GetVotingExecutionRecordWinnersRequest = record {
    voting_id : VotingId;
    page_req : PageRequest;
};

type RemoteCallArgs = variant {
    CandidString : vec text;
    Encoded : blob;
};

type RemoteCallPayload = record {
    endpoint : RemoteCallEndpoint;
    args : RemoteCallArgs;
    cycles : nat64;
};

type Program = variant {
    Empty;
    RemoteCallSequence : vec RemoteCallPayload;
};

type ChoiceExternal = record {
    name : text;
    description : text;
    program : Program;
};

type VotingExecutionRecordWinnersPage = record {
    data : vec record { 0 : ChoiceId; 1 : ChoiceExternal; };
    has_next : bool;
};

type GetVotingExecutionRecordWinnersResponse = record {
    page : VotingExecutionRecordWinnersPage;
};

type GetVotingExecutionRecordResultsRequest = record {
    voting_id : VotingId;
    page_req : PageRequest;
};

type CandidRejectionCode = variant {
    NoError;
    SysFatal;
    SysTransient;
    DestinationInvalid;
    CanisterReject;
    CanisterError;
    Unknown;
};

type RawCandidCallResult = variant {
    Ok : blob;
    Err : record { 0 : CandidRejectionCode; 1 : text; };
}

type ProgramExecutionResult = variant {
    Empty;
    RemoteCallSequence : vec RawCandidCallResult;
};

type VotingExecutionRecordResultsPage = record {
    data : vec record { 0 : ChoiceId; 1 : ProgramExecutionResult; };
    has_next : bool;
};

type GetVotingExecutionRecordResultsResponse = record {
    page : VotingExecutionRecordResultsPage;
};

// ------------------ SERVICE ------------------

service : (principal) -> {
    // ------------------ SHARES MOVE --------------------
    "get_shares_info_of_at" : (GetSharesInfoOfAtRequest) -> (GetSharesInfoOfAtResponse) query;

    // ----------------- VOTING EXECUTION ----------------
    "get_voting_execution_records" : (GetVotingExecutionRecordsRequest) -> (GetVotingExecutionRecordsResponse) query;
    "get_voting_execution_record_winners" : (GetVotingExecutionRecordWinnersRequest) -> (GetVotingExecutionRecordWinnersResponse) query;
    "get_voting_execution_record_results" : (GetVotingExecutionRecordResultsRequest) -> (GetVotingExecutionRecordResultsResponse) query;
}
